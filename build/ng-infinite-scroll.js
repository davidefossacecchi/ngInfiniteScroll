// Generated by CoffeeScript 1.10.0
(function() {
  var mod;

  mod = void 0;

  mod = angular.module('infinite-scroll', []);

  mod.directive('infiniteScroll', [
    '$rootScope', '$window', '$timeout', function($rootScope, $window, $timeout) {
      return {
        link: function(scope, elem, attrs) {
          var $document, checkWhenEnabled, handler, scrollDistance, scrollEnabled;
          checkWhenEnabled = void 0;
          handler = void 0;
          scrollDistance = void 0;
          scrollEnabled = void 0;
          $window = angular.element($window);
          $document = angular.element(document);
          scrollDistance = 0;
          if (attrs.infiniteScrollDistance !== null) {
            scope.$watch(attrs.infiniteScrollDistance, function(value) {
              return scrollDistance = parseInt(value, 10);
            });
          }
          scrollEnabled = true;
          checkWhenEnabled = false;
          if (attrs.infiniteScrollDisabled !== null) {
            scope.$watch(attrs.infiniteScrollDisabled, function(value) {
              scrollEnabled = !value;
              if (scrollEnabled && checkWhenEnabled) {
                checkWhenEnabled = false;
                return handler();
              }
            });
          }
          handler = function() {
            var elementBottom, remaining, shouldScroll;
            elementBottom = void 0;
            remaining = void 0;
            shouldScroll = void 0;
            elementBottom = elem.offset().top + elem.height();
            shouldScroll = (scrollDistance * 0.1) >= (1 - ($window.scrollTop() / ($document.height() - $window.height())));
            if (shouldScroll && scrollEnabled) {
              if ($rootScope.$$phase) {
                return scope.$eval(attrs.infiniteScroll);
              } else {
                return scope.$apply(attrs.infiniteScroll);
              }
            } else if (shouldScroll) {
              return checkWhenEnabled = true;
            }
          };
          $window.on('scroll', handler);
          scope.$on('$destroy', function() {
            return $window.off('scroll', handler);
          });
          return $timeout((function() {
            if (attrs.infiniteScrollImmediateCheck) {
              if (scope.$eval(attrs.infiniteScrollImmediateCheck)) {
                return handler();
              }
            } else {
              return handler();
            }
          }), 0);
        }
      };
    }
  ]);

}).call(this);
